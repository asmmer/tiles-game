{"version":3,"sources":["components/TileGrid/Tile.tsx","components/TileGrid.tsx","components/Button.tsx","helpers/Game.ts","components/InfoTitle.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["React","memo","text","isOpened","onClick","isUnlock","className","TileGrid","source","handleOpenTile","tiles","map","key","disabled","Game","min","max","_min","Math","ceil","_max","floor","random","length","Array","apply","val","i","arr","shakedArr","currentIndex","temp","randIndex","sequenceLength","this","shake","getSequence","openings","SELECTED_KEYS","TILE","App","useState","setOpenings","selectedKeys","setSelectedKeys","getRandomPairedArray","randSequence","setRandSequence","fill","setTiles","isAnimating","setIsAnimating","resetEnable","setResetEnable","useEffect","firstKey","secondKey","firstTile","secondTile","isEqualTiles","setTimeout","currentTiles","tile","includes","every","alert","div","transition","duration","ease","initial","opacity","scale","animate","selectedKey","MAX_OPENED_TILES","currentOpenings","currentKeys","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.82eb1aad.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ITile } from '../../interfaces';\r\nimport './Tile/Tile.css';\r\n\r\nfunction Tile({ text, isOpened, isUnlock, onClick }: ITile) {\r\n    return (\r\n        <div\r\n            className={\"tile\" + (isOpened ? \" tile-flip\" : \"\")}\r\n            onClick={onClick}\r\n        >\r\n            <div className=\"tile__front-side\"></div>\r\n            <div className=\"tile__back-side\">{text}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.memo(Tile);","import React from 'react';\r\nimport { ITile } from '../interfaces';\r\nimport Tile from './TileGrid/Tile';\r\nimport './TileGrid/TileGrid.css';\r\n\r\ninterface ITileGrid {\r\n    source: ITile[];\r\n    handleOpenTile: (key: number) => void;\r\n}\r\n\r\nfunction TileGrid({ source, handleOpenTile }: ITileGrid) {\r\n    const tiles = source.map(({ text, isOpened, isUnlock }: ITile, key) => (\r\n        <Tile\r\n            key={key}\r\n            text={text}\r\n            isOpened={isOpened}\r\n            isUnlock={isUnlock}\r\n            onClick={() => handleOpenTile(key)}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <section className=\"tile-grid\">\r\n            {tiles}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default TileGrid;","import React from 'react';\r\nimport { IControl } from '../interfaces';\r\n\r\nimport './Button/Button.css';\r\n\r\ninterface IButton extends IControl {\r\n    text: string;\r\n}\r\n\r\nfunction Button({ text, onClick, disabled }: IButton) {\r\n    return (\r\n        <button \r\n            className=\"base-button\"\r\n            onClick={onClick}\r\n            disabled={disabled}\r\n        >\r\n            {text}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default React.memo(Button);","/**\r\n * Main game logic.\r\n */\r\nexport default class Game {\r\n    private static getRandomInt(min: number, max: number): number {\r\n        const _min = Math.ceil(min);\r\n        const _max = Math.floor(max);\r\n        return Math.floor(Math.random() * (_max - _min)) + _min;\r\n    }\r\n\r\n    private static getSequence(length: number): number[] {\r\n        return Array.apply(0, Array(length)).map((val, i) => i + 1);\r\n    }\r\n\r\n    private static shake(arr: number[]): number[] {\r\n        const shakedArr = [...arr];\r\n        let currentIndex = arr.length;\r\n        let temp = null;\r\n        let randIndex = null;\r\n\r\n        while (0 !== currentIndex) {\r\n          randIndex = Math.floor(Math.random() * currentIndex);\r\n          currentIndex -= 1;\r\n      \r\n          temp = shakedArr[currentIndex];\r\n          shakedArr[currentIndex] = shakedArr[randIndex];\r\n          shakedArr[randIndex] = temp;\r\n        }\r\n      \r\n        return shakedArr;\r\n    }\r\n\r\n    public static getRandomPairedArray(length: number): number[] {\r\n        const sequenceLength = length / 2;\r\n        const arr = this.shake([\r\n            ...this.getSequence(sequenceLength),\r\n            ...this.getSequence(sequenceLength)\r\n        ]);\r\n\r\n        return arr;\r\n    }\r\n}","import React from 'react';\r\n\r\ninterface IInfoTitle {\r\n    openings: number;\r\n}\r\n\r\nfunction InfoTitle({ openings }: IInfoTitle) {\r\n    return (\r\n        <h1>{`Openings: ${openings}`}</h1>\r\n    )\r\n}\r\n\r\nexport default React.memo(InfoTitle);","import React, { useEffect, useState } from 'react';\r\nimport TileGrid from './components/TileGrid';\r\nimport Button from './components/Button';\r\nimport Game from './helpers/Game';\r\nimport { ITile } from './interfaces';\r\nimport InfoTitle from './components/InfoTitle';\r\nimport { motion } from \"framer-motion\"\r\n\r\nimport './App.css';\r\n\r\nconst MAX_OPENED_TILES = 2;\r\nconst GRID_SIZE = 16;\r\nconst SELECTED_KEYS: number[] = [];\r\nconst TILE: ITile = {\r\n    text: \"\",\r\n    isOpened: false,\r\n    isUnlock: false\r\n};\r\n\r\nfunction App() {\r\n\tconst [openings, setOpenings] = useState(0);\r\n\tconst [selectedKeys, setSelectedKeys] = useState(SELECTED_KEYS);\r\n    const [randSequence, setRandSequence] = useState(Game.getRandomPairedArray(GRID_SIZE));\r\n    const [tiles, setTiles] = useState(Array(GRID_SIZE).fill(TILE).map((val, i): ITile => ({\r\n        ...val,\r\n        text: randSequence[i]\r\n    })));\r\n\tconst [isAnimating, setIsAnimating] = useState(false);\r\n\tconst [resetEnable, setResetEnable] = useState(true);\r\n\t\r\n\tfunction handleOpenTile(selectedKey: number) {\r\n        const { isOpened } = tiles[selectedKey];\r\n\r\n        if (isOpened || \r\n            selectedKeys.length === MAX_OPENED_TILES + 1 ||\r\n            isAnimating) {\r\n            return;\r\n        }\r\n\r\n        setOpenings(currentOpenings => currentOpenings + 1);\r\n        setTiles(currentTiles => currentTiles.map((tile, key): ITile => (key === selectedKey) ? {\r\n            ...tile,\r\n            isOpened: true\r\n        }: tile));\r\n        setSelectedKeys(currentKeys => [...currentKeys, selectedKey]);\r\n    }\r\n\r\n    function handleResetGame() {\r\n\t\tsetIsAnimating(true);\r\n\t\tsetResetEnable(false);\r\n\t\tsetOpenings(0);\r\n\t\tsetSelectedKeys(SELECTED_KEYS);\r\n\t\tsetRandSequence(Game.getRandomPairedArray(GRID_SIZE));\r\n\t\tsetTiles(Array(GRID_SIZE).fill(TILE).map((val, i): ITile => ({\r\n\t\t\t...val,\r\n\t\t\tisOpened: false\r\n\t\t})));\r\n\r\n\t\tsetTimeout(() => {\r\n\t\t\tsetTiles(currentTiles => currentTiles.map((tile, i): ITile => ({\r\n\t\t\t\t...tile,\r\n\t\t\t\ttext: randSequence[i].toString()\r\n\t\t\t})));\r\n\t\t\tsetIsAnimating(false);\r\n\t\t\tsetResetEnable(true);\r\n\t\t}, 500);\r\n    }\r\n\r\n    function showWin() {\r\n        alert(\"WIN\");\r\n    }\r\n\r\n    function isWin() : boolean {\r\n        return tiles.every((tile: ITile) => tile.isOpened === true);\r\n    }\r\n\r\n    function isEqualTiles([firstKey, secondKey]: number[]) {\r\n        const firstTile: ITile = tiles[firstKey]; \r\n        const secondTile: ITile = tiles[secondKey];\r\n        \r\n        return firstTile.text === secondTile.text;\r\n    }\r\n\r\n    function closeSelectedTiles() {\r\n        setTiles(currentTiles => currentTiles.map((tile: ITile, key) => {\r\n            return selectedKeys.includes(key) ? {\r\n                ...tile,\r\n                isOpened: false\r\n            } : tile\r\n        }));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (selectedKeys.length === MAX_OPENED_TILES) {\r\n            if (!isEqualTiles(selectedKeys)) {\r\n                setIsAnimating(true);\r\n                setTimeout(() => {\r\n                    closeSelectedTiles();\r\n                    setSelectedKeys([]);\r\n                    setIsAnimating(false);\r\n                }, 1000);\r\n            } else {\r\n                setIsAnimating(true);\r\n                setTimeout(() => {\r\n                    setSelectedKeys([]);\r\n                    setIsAnimating(false);\r\n                    if (isWin()) {\r\n                        showWin();\r\n                    }\r\n                }, 1000);\r\n            }\r\n        }\r\n    }, [selectedKeys])\r\n\r\n\treturn (\r\n\t\t<div className=\"App\">\r\n            <motion.div \r\n                className=\"app__info-panel\" \r\n                transition={{ duration: 0.5, ease: \"easeInOut\" }} \r\n                initial={{ opacity: 0, scale: 0 }} \r\n                animate={{ opacity: 1, scale: 1 }}\r\n            >\r\n                <InfoTitle openings={openings}/>\r\n            </motion.div>\r\n            <motion.div \r\n                className=\"app__main-section\"\r\n                transition={{ duration: 0.75, ease: \"easeInOut\" }}\r\n                initial={{ opacity: 0, scale: 0 }} \r\n                animate={{ opacity: 1, scale: 1 }}\r\n            >\r\n                <TileGrid source={tiles} handleOpenTile={handleOpenTile}/>\r\n            </motion.div>\r\n            <motion.div \r\n                className=\"app__controllers-panel\" \r\n                transition={{ duration: 1, ease: \"easeInOut\" }} \r\n                initial={{ opacity: 0, scale: 0 }} \r\n                animate={{ opacity: 1, scale: 1 }}\r\n            >\r\n                <Button \r\n                    text=\"Reset\"\r\n                    onClick={handleResetGame}\r\n                    disabled={!resetEnable || !(openings > 0)}\r\n                />\r\n            </motion.div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}